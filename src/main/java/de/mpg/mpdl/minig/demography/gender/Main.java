package de.mpg.mpdl.minig.demography.gender;

import com.google.common.base.Charsets;
import com.google.common.io.Files;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import org.marc4j.MarcStreamReader;
import org.marc4j.marc.DataField;
import org.marc4j.marc.Record;
import org.marc4j.marc.Subfield;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;
import java.util.List;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'vlad' at '9/16/14 2:34 PM' with Gradle 2.0
 *
 * @author vlad, @date 9/16/14 2:34 PM
 */
public class Main {

    private static final Logger LOGGER = LoggerFactory.getLogger(Main.class);
    public static final File JSON_FILE = new File("response.json");
    public static final String RESOURCES_MARC = "/marcdump.mrc";


    public static void main(String[] args) throws Exception {


       if (! JSON_FILE.exists()) {
            String jsonString = fetchGenderJsonFromRest();
            LOGGER.info(jsonString);
            Files.write(jsonString, JSON_FILE, Charsets.UTF_8);
        }

        LOGGER.info("Statistics");
        List<Person> persons = unmarshalJsonFromFile();
        int countMale = 0, countFmale = 0, countNull = 0;
        for (Person p: persons) {
            if (p.getGender() == Person.Gender.female)
                countFmale++;
            if (p.getGender() == Person.Gender.male)
                countMale++;
            if (p.getGender() == null)
                countNull++;
        }

        LOGGER.info( "total:" + persons.size()) ;
        LOGGER.info( "countFmale:" + countFmale) ;
        LOGGER.info( "countMale:" + countMale) ;
        LOGGER.info( "countNull:" + countNull) ;

    }

    public static List<Person> unmarshalJsonFromFile() throws Exception {
        return Main.unmarshall(Files.toString(JSON_FILE, Charsets.UTF_8));
    }

    public static String fetchGenderJsonFromRest() throws IOException {
        InputStream input = Main.class.getResourceAsStream(
                        RESOURCES_MARC);

        MarcStreamReader reader = new MarcStreamReader(input);
        Client client = ClientBuilder.newClient();
        WebTarget target = client.target("http://api.genderize.io");

        int count = 0;
        int rejected = 0;

        StringBuilder sb = new StringBuilder();


        while (reader.hasNext()) {
            Record rec = reader.next();

            DataField field = (DataField) rec.getVariableField("100");

            if (field != null) {

                List subfields = field.getSubfields();

                Iterator i = subfields.iterator();

                while (i.hasNext()) {
                    Subfield subfield = (Subfield) i.next();
                    char code = subfield.getCode();
                    String data = subfield.getData();

                    LOGGER.info("Subfield code: " + code + " Data element: " + data);

                    String surName = data.split(",")[1].trim();

                    //remove initials
                    surName = surName.replaceAll("\\w\\.\\s*", "");

                    if ( surName.length()>0 ) {
                        //remove second(third ...) surname if is it
                        if (surName.indexOf(" ")!=-1 )
                            surName = surName.split("\\s+")[0];

                        LOGGER.info("Surname: " + surName);

                        target = target.queryParam("name", null );
                        target = target.queryParam("name", surName );

                        Response response = target
                                .request(MediaType.APPLICATION_JSON)
                                .get();
                        String jsonString = response.readEntity(String.class);

                        sb.append(jsonString);

                        sb.append(",");

                        count++;

                    } else {
                        LOGGER.info("REJECTED!");
                        rejected++;
                    }


                }
            }

        }

        input.close();
        sb.setLength(sb.length() - 1);
        LOGGER.info("Count: " + count);
        LOGGER.info("Rejected: " + rejected);
        return "[" + sb.toString() + "]";

    }

    public static List<Person> unmarshall(String jsonString) throws Exception {

        ObjectMapper mapper = new ObjectMapper();
        List<Person> personList = mapper.readValue(jsonString, new TypeReference<List<Person>>() { });
        if (LOGGER.isInfoEnabled()) {
            for (Person p : personList) {
                LOGGER.info("name:" + p.getName() + "; gender:" + p.getGender() + "; probability:" + p.getProbability() + "; count:" + p.getCount());
            };
        }
        return personList;


    }

}
